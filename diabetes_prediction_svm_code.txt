# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix

# Load the dataset
diabetes_data = pd.read_csv('diabetes.csv')

# Check for missing values
print('Missing values:', diabetes_data.isnull().sum())

# Handle missing values (if any)
diabetes_data = diabetes_data.dropna()

# Preprocess data
# Handle categorical features (if any)
label_encoder = LabelEncoder()
for column in diabetes_data.columns:
    if diabetes_data[column].dtype == 'object':
        diabetes_data[column] = label_encoder.fit_transform(diabetes_data[column])

# Separate features and target variable
X = diabetes_data.drop('Outcome', axis=1)
y = diabetes_data['Outcome']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the SVM model
svm_model = SVC(kernel='rbf')
svm_model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = svm_model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)

# Create a confusion matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:')
print(cm)

# Visualizations
# Correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(diabetes_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Distribution of features
plt.figure(figsize=(15, 10))
for i, feature in enumerate(X.columns):
    plt.subplot(3, 4, i+1)
    sns.histplot(diabetes_data[feature], kde=True)
    plt.xlabel(feature)
plt.tight_layout()
plt.show()

# Pairplot
sns.pairplot(diabetes_data, hue='Outcome')
plt.show()

# Violin plot
plt.figure(figsize=(12, 6))
sns.violinplot(x='Outcome', y='BMI', data=diabetes_data)
plt.title('Distribution of BMI by Outcome')
plt.show()

# Box plot
plt.figure(figsize=(12, 6))
sns.boxplot(x='Outcome', y='Age', data=diabetes_data)
plt.title('Distribution of Age by Outcome')
plt.show()